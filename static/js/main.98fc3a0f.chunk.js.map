{"version":3,"sources":["components/QuoteContainer.js","App.js","reportWebVitals.js","index.js"],"names":["QuoteContainer","props","useState","quotes","setQuotes","randomQuotes","setRandomQuotes","currentQuoteIndex","setCurrentQuoteIndex","disabled","setDisabled","useEffect","getQuotes","axios","get","mode","then","res","arrQuotes","data","firstRandomIndex","Math","floor","random","length","prevRandomQuotes","concat","randomQuote","quote","className","id","author","onClick","randomIndex","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yQAqGeA,EA7FQ,SAACC,GAEtB,MAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAwCF,mBAAS,IAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KACA,EAAkDJ,mBAAS,GAA3D,mBAAOK,EAAP,KAA0BC,EAA1B,KACA,EAAgCN,oBAAS,GAAzC,mBAAOO,EAAP,KAAiBC,EAAjB,KAGAC,qBAAU,WAERC,MACC,IAIH,IAAMA,EAAY,WAEhBC,IAAMC,IAAI,wIAAyI,CACjJC,KAAM,UAELC,MAAK,SAAAC,GACJ,IAAMC,EAAYD,EAAIE,KAElBC,EAAmBC,KAAKC,MAAMD,KAAKE,SAAWL,EAAUM,QAE5DlB,GAAgB,SAACmB,GAEf,OAAOA,EAAiBC,OAAOR,EAAUE,OAE3ChB,EAAUc,OAiCVS,EAActB,EAAaE,GAE7BqB,EAAQ,WAWZ,OAVID,IACFC,EACE,sBAAKC,UAAU,mBAAf,UACE,4BAAYC,GAAG,YAAf,SAA4BH,EAAYC,QACxC,sBAAME,GAAG,aAAT,SAAuBH,EAAYI,aAOvC,0BAASF,UAAU,gBAAnB,UACE,yBAAQA,UAAU,eAAlB,UACE,sDACA,0BAEF,qBAAKA,UAAU,iBAAf,SACGD,IAEH,sBAAKC,UAAU,gBAAf,UACE,wBAAQA,UAAU,iBAAiBpB,SAAUA,EAAUuB,QAnC3C,WAEU,IAAtBzB,GACFC,EAAqBD,EAAoB,GACzCG,GAAY,IACHH,EAAoB,GAC7BC,EAAqBD,EAAoB,IA6BvC,4BACA,wBAAQsB,UAAU,iBAAiBG,QAjDvB,WAEhB,IAAIC,EAAcZ,KAAKC,MAAMD,KAAKE,SAAWpB,EAAOqB,QACpDlB,GAAgB,SAACmB,GAEf,OAAOA,EAAiBC,OAAOvB,EAAO8B,OAExCzB,EAAqBD,EAAoB,GACzCG,GAAY,IAyCR,gCCjFOwB,MAVf,WACE,OACE,qBAAKL,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,cAAC,EAAD,SCKOM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBrB,MAAK,YAAkD,IAA/CsB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.98fc3a0f.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './css/QuoteContainer.css'\r\n\r\n// import Axios library\r\nimport axios from 'axios';\r\n\r\n\r\n\r\nconst QuoteContainer = (props) => {\r\n\r\n  const [quotes, setQuotes] = useState([])\r\n  const [randomQuotes, setRandomQuotes] = useState([])\r\n  const [currentQuoteIndex, setCurrentQuoteIndex] = useState(0)\r\n  const [disabled, setDisabled] = useState(true)\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    getQuotes()\r\n  }, []);\r\n\r\n\r\n  // fetching quotes from API\r\n  const getQuotes = () => {\r\n\r\n    axios.get('https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json', {\r\n      mode: 'corse'\r\n    })\r\n      .then(res => {\r\n        const arrQuotes = res.data;\r\n\r\n        let firstRandomIndex = Math.floor(Math.random() * arrQuotes.length);\r\n\r\n        setRandomQuotes((prevRandomQuotes) => {\r\n\r\n          return prevRandomQuotes.concat(arrQuotes[firstRandomIndex])\r\n        })\r\n        setQuotes(arrQuotes)\r\n      })\r\n  }\r\n\r\n\r\n  // Uwaga: W instrukcjach nie było opisane, że wyświetlane cytaty nie mogą się powtórzyć i że losowanie ma się kiedyś kończyć.\r\n  //Zakładam więc, że losujemy zawsze i cytaty mogą się powtórzyć.\r\n  // Next quote button\r\n  const nextQuote = () => {\r\n\r\n    let randomIndex = Math.floor(Math.random() * quotes.length);\r\n    setRandomQuotes((prevRandomQuotes) => {\r\n\r\n      return prevRandomQuotes.concat(quotes[randomIndex])\r\n    })\r\n    setCurrentQuoteIndex(currentQuoteIndex + 1)\r\n    setDisabled(false)\r\n  }\r\n\r\n\r\n  // Previous quote button\r\n  const prevQuote = () => {\r\n\r\n    if (currentQuoteIndex === 1) {\r\n      setCurrentQuoteIndex(currentQuoteIndex - 1)\r\n      setDisabled(true)\r\n    } else if (currentQuoteIndex > 1) {\r\n      setCurrentQuoteIndex(currentQuoteIndex - 1)\r\n    }\r\n  }\r\n\r\n\r\n  // Display the quote on the page\r\n  const randomQuote = randomQuotes[currentQuoteIndex]\r\n\r\n  let quote = 'no quote'\r\n  if (randomQuote) {\r\n    quote = (\r\n      <div className='quote-containter'>\r\n        <blockquote id='spn-quote'>{randomQuote.quote}</blockquote>\r\n        <span id='spn-author'>{randomQuote.author}</span>\r\n      </div>\r\n    )\r\n  }\r\n\r\n\r\n  return (\r\n    <section className='quote-section'>\r\n      <header className='header-title'>\r\n        <h1>Choose your quote...</h1>\r\n        <hr />\r\n      </header>\r\n      <div className='blockquote-box'>\r\n        {quote}\r\n      </div>\r\n      <div className='btn-container'>\r\n        <button className='btn-prev-quote' disabled={disabled} onClick={prevQuote}>Previous quote</button>\r\n        <button className='btn-next-quote' onClick={nextQuote}>Next quote!</button>\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\n\r\nexport default QuoteContainer;","import './App.css';\nimport QuoteContainer from './components/QuoteContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <QuoteContainer />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}